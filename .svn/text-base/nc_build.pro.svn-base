;+
;
; @param CMD {in}{type=structure}
; command line of window
;
; @param FLD {in}{required}{type=structure}
; field
;
; @param DIREC {in}{required}{type=string}
; data type (x,xy,xyzt,yt,etc...)
;
; @param GRID_TYPE {in}{required}{type=string}
; grid_type = grid type (to select right arrays)
;
; @returns
; cdf_description string and
; global_attributes, (using also common in com_eg)
;
; X,Y,Z,T = structures containing attributes for each direction :
;     x.name, x.units, x.long_name, x.data (+t.calendar for time)
; + Global = global attributes: title and origin
;
; @examples
;
; IDL> direc='xy'
; IDL> grid_type='T'
; IDL> fld={origin:'ginette'}
; IDL> result=nc_build(cmd, fld, direc, grid_type)
; IDL> print, result
; ,X=x_att,Y=y_att,Z=z_att,GLOBAL=global_attributes
; IDL> help, global_attributes,/structure
;** Structure <846dfdc>, 4 tags, length=48, data length=48, refs=1:
;   TITLE           STRING    'Data generated by nc_put'
;   ORIGIN          STRING    'ginette'
;   CONVENTIONS     STRING    'GDT 1.2'
;   SOFTWARE        STRING    'post_it'
; IDL> help,x_att,/structure
;** Structure <8476c74>, 4 tags, length=40, data length=40, refs=1:
;   NAME            STRING    'nav_lon'
;   UNITS           STRING    'degrees_east'
;   LONG_NAME       STRING    'Longitude'
;   DATA            FLOAT     Array[1]
;
; IDL> help,y_att,/structure
;** Structure <846dd3c>, 4 tags, length=40, data length=40, refs=1:
;   NAME            STRING    'nav_lat'
;   UNITS           STRING    'degrees_north'
;   LONG_NAME       STRING    'Latitude'
;   DATA            FLOAT     Array[1]
; IDL> help,z_att,/structure
;** Structure <846deac>, 4 tags, length=40, data length=40, refs=1:
;   NAME            STRING    'deptht'
;   UNITS           STRING    'm'
;   LONG_NAME       STRING    'No vertical dimension'
;   DATA            FLOAT           0.00000
;
; @uses
; <pro>common</pro>
; <propost_it>com_eg</propost_it>
;
; @todo
;
; un exemple avec cmd=
;
; check conformity to GDT convention (cf. in attributes)
;
; @history
;
; - fplod 20091210T114207Z aedon.locean-ipsl.upmc.fr (Darwin)
;
;   * check parameters

; @version
; $Id$
;
;-
FUNCTION nc_build, cmd, fld, direc, grid_type
;
  compile_opt idl2, strictarrsubs
;
@com_eg
@common
;
;
; Return to caller if errors
 ON_ERROR, 2
;
   IF debug_w THEN BEGIN
    info = report('enter ...')
    print, '    direc = ', direc
   ENDIF

 usage='result=nc_build(cmd, fld, direc, grid_type)

 arg_type = size(fld,/type)
 IF (arg_type NE 8) THEN BEGIN
   ras = report(['Incorrect arg type fld' $
          + '!C' $
          + 'Usage : ' + usage])
   return, -1
 ENDIF

 arg_struct_tags=TAG_NAMES(fld)

 tag=WHERE(STRMATCH(arg_struct_tags, 'ORIGIN'))
 IF (tag EQ -1) THEN BEGIN
   ras = report(['Incorrect arg tag ORIGIN fld' $
          + '!C' $
          + 'Usage : ' + usage])
   return, -1
 ENDIF
 arg_type = size(fld.origin,/type)
 IF (arg_type NE 7) THEN BEGIN
   ras = report(['Incorrect arg type fld.origin' $
          + '!C' $
          + 'Usage : ' + usage])
   return, -1
 ENDIF



; grid

   xpos = strpos(direc, 'x')
   ypos = strpos(direc, 'y')
   zpos = strpos(direc, 'z')
   tpos = strpos(direc, 't')

   str_x = ''
   str_y = ''
   str_z = ''
   str_t = ''
   IF xpos NE -1 THEN BEGIN
      CASE grid_type OF
         'T': xdata = glamt
         'U': xdata = glamu
         'V': xdata = glamv
         'W': xdata = glamt
      ENDCASE
   ENDIF ELSE BEGIN
       ; degenerated dimension case
       xdata=0.
   ENDELSE
   x_att = {name:'nav_lon', units:'degrees_east', long_name:'Longitude', data:xdata}
   str_x = ',X=x_att'

   IF ypos NE -1 THEN BEGIN
       IF xpos NE -1 THEN BEGIN
           CASE grid_type OF
               'T': ydata = gphit
               'U': ydata = gphiu
               'V': ydata = gphiv
               'W': ydata = gphit
           ENDCASE
       ENDIF ELSE BEGIN
            ; degenerated dimension case
           idx = where(gphit EQ max(gphit))
           idx = idx MOD jpi
           boite_pltz = [idx[0], idx[0], -90,90]
           domdef, boite_pltz, /xindex ; indice pour x
           ydata = reform(gphit[idx[0], firstyt:lastyt],lastyt-firstyt+1)
           print, '  firstyt:lastyt', lastyt-firstyt+1
       ENDELSE
   ENDIF ELSE BEGIN
       ; degenerated dimension case
       ydata=0.
   ENDELSE
   y_att = {name:'nav_lat', units:'degrees_north', long_name:'Latitude', data:ydata}
   str_y = ',Y=y_att'

   IF zpos NE -1 THEN BEGIN
      CASE grid_type OF
         'T': BEGIN & zdata = gdept & z_txt = 'Vertical T levels' & END
         'U': BEGIN & zdata = gdept & z_txt = 'Vertical T levels' & END
         'V': BEGIN & zdata = gdept & z_txt = 'Vertical T levels' & END
         'W': BEGIN & zdata = gdepw & z_txt = 'Vertical W levels' & END
      ENDCASE
   ENDIF ELSE BEGIN
       ; degenerated dimension case
       zdata=0.
       z_txt = 'No vertical dimension'
   ENDELSE
   z_att = {name:'deptht', units:'m', long_name:z_txt, data:zdata}
   str_z = ',Z=z_att'

   IF tpos NE -1 THEN BEGIN
      t_att_name = ''
      CASE calendar_type OF
         1: t_att_calendar = 'Gregorian'
         0: t_att_calendar = '365 days per year'
         ELSE: t_att_calendar =strtrim(string(calendar_type), 2)+' days per month'
      ENDCASE
      t_att_long_name = 'Time axis'
      t_att_data = time
      IF time[0] GT 1 THEN BEGIN
         t_att_origin = '0001-JAN-01 00:00:00'
      ENDIF ELSE BEGIN
        t_att_origin = def_time_origin(cmd.timave, cmd.date1)
      ENDELSE
      t_att_units = 'Days since '+t_att_origin
      t_att = {name:t_att_name, calendar:t_att_calendar, origin:t_att_origin, units:t_att_units, long_name:t_att_long_name, data:t_att_data}
      str_t = ',T=t_att'
   ENDIF

   ; global attributes

   global_attributes = {title:'Data generated by nc_put', origin:fld.origin, conventions:'GDT 1.2', software: 'post_it'}

   cdf_description = str_x+str_y+str_z+str_t+',GLOBAL=global_attributes'

   IF debug_w THEN BEGIN
    print, '    cdf_description = ', cdf_description
    info = report('leaving ...')
   ENDIF

   return, cdf_description

END
